<!-- -*- mode: nxml -*- -->
<configure
	xmlns="http://namespaces.zope.org/zope"
	xmlns:zcml="http://namespaces.zope.org/zcml">
	<include package="zope.component" />
	<include package="zope.componentvocabulary" />
	<include package="nti.dataserver" />

	<!-- Account Creation -->
	<utility factory=".site_policies.RequestAwareUserPlacer" />

	<!-- Resource traversal -->
	<adapter factory="._dataserver_pyramid_traversal.Dataserver2RootTraversable"
			 provides="zope.traversing.interfaces.ITraversable" />
	<adapter factory="._dataserver_pyramid_traversal.UserTraversable"
			 provides="zope.traversing.interfaces.ITraversable" />

	<adapter factory="._dataserver_pyramid_traversal.ProviderTraversable"
			 provides="zope.traversing.interfaces.ITraversable" />
	<class class="nti.dataserver.users.User">
		<!-- Migration -->
		<implements interface="nti.appserver.interfaces.IUserResource" />
	</class>

	<adapter factory=".workspaces.ContainerEnumerationWorkspace" />

	<adapter factory=".workspaces._UserPagesCollection" name='Pages'/>
	<!-- The pages adapter is also the default -->
	<adapter factory=".workspaces._UserPagesCollection" />
	<adapter factory=".workspaces._UserEnrolledClassSectionsCollection"
			 name='EnrolledClassSections'/>

	<adapter factory=".workspaces._ProviderCollection" />
	<adapter factory=".workspaces.HomogeneousTypedContainerCollection"
			 />
	<!--
	As it stands now, returning FriendsLists cannot be cached,
	because they include dynamic presence information
	-->
	<adapter factory=".workspaces.FriendsListContainerCollection"
			 for="nti.dataserver.interfaces.IFriendsListContainer"
			 provides=".interfaces.IContainerCollection" />
	<adapter factory=".pyramid_renderers.uncacheable_factory" />

	<adapter factory=".workspaces.LibraryWorkspace" />
	<adapter factory=".workspaces.LibraryCollection" />
	<adapter factory=".workspaces.WorkspaceExternalizer" />
	<adapter factory=".workspaces.UserService"
			 provides='.interfaces.IUserService'/>
	<adapter factory=".workspaces.ServiceExternalizer" />
	<adapter factory=".workspaces.UserServiceExternalizer"
			 for=".interfaces.IUserService" />
	<subscriber factory="._adapters._SectionInfoUserLikeDecorator"
				provides="nti.externalization.interfaces.IExternalObjectDecorator"
				/>
	<subscriber factory="._adapters._DFLUserLikeDecorator"
				provides="nti.externalization.interfaces.IExternalObjectDecorator"
				/>
	<subscriber factory="._adapters._UserRealnameStripper"
				provides="nti.externalization.interfaces.IExternalObjectDecorator"
				/>

	<adapter factory=".workspaces._NTIIDEntryExternalizer" />
	<subscriber factory=".workspaces.ContentUnitInfoHrefDecorator"
				provides="nti.externalization.interfaces.IExternalMappingDecorator"/>
	<subscriber factory=".contentlibrary_views._ContentUnitAssessmentItemDecorator"
				provides="nti.externalization.interfaces.IExternalMappingDecorator"/>
	<adapter factory=".contentlibrary_views._ContainerContentUnitPreferencesFactory"
			 for="nti.dataserver.containers.LastModifiedBTreeContainer"
			 provides=".interfaces.IContentUnitPreferences" />

	<adapter factory=".contentlibrary_views._DelimitedHierarchyContentUnitPreferencesFactory"
			 provides=".interfaces.IContentUnitPreferences" />

	<adapter factory=".contentlibrary_views._ContainerFieldsTraversable"
			 for="nti.dataserver.containers.LastModifiedBTreeContainer"
			 provides="zope.traversing.interfaces.ITraversable"
			 name="fields" />
	<adapter factory=".contentlibrary_views._ContainerFieldsTraversable"
			 for="nti.dataserver.containers.LastModifiedBTreeContainer pyramid.interfaces.IRequest"
			 provides="zope.traversing.interfaces.ITraversable"
			 name="fields" />

	<adapter factory=".contentlibrary_views._ContentUnitFieldsTraversable"
			 for="nti.contentlibrary.interfaces.IContentUnit"
			 provides="zope.traversing.interfaces.ITraversable"
			 name="fields" />
	<adapter factory=".contentlibrary_views._ContentUnitFieldsTraversable"
			 for="nti.contentlibrary.interfaces.IContentUnit pyramid.interfaces.IRequest"
			 provides="zope.traversing.interfaces.ITraversable"
			 name="fields" />


	<subscriber factory=".flagging_views.FlagLinkDecorator"
				provides="nti.externalization.interfaces.IExternalMappingDecorator" />
	<subscriber factory=".liking_views.FavoriteLinkDecorator"
				provides="nti.externalization.interfaces.IExternalMappingDecorator" />
	<subscriber factory=".liking_views.LikeLinkDecorator"
				provides="nti.externalization.interfaces.IExternalMappingDecorator" />
	<subscriber factory=".ugd_query_views.RepliesLinkDecorator"
				provides="nti.externalization.interfaces.IExternalMappingDecorator" />

	<subscriber factory=".contentlibrary_views._ContentUnitPreferencesDecorator"
				provides="nti.externalization.interfaces.IExternalMappingDecorator"
				/>
	<subscriber factory=".pyramid_renderers_edit_link_decorator.EditLinkDecorator"
				provides="nti.externalization.interfaces.IExternalMappingDecorator"
				for="nti.dataserver.interfaces.IModeledContent" />
	<subscriber factory=".pyramid_renderers_edit_link_decorator.EditLinkDecorator"
				provides="nti.externalization.interfaces.IExternalMappingDecorator"
				for="nti.dataserver.interfaces.IUser" />

	<subscriber factory=".pyramid_renderers_profile_link_decorator.ProfileLinkDecorator"
				provides="nti.externalization.interfaces.IExternalMappingDecorator" />


	<adapter factory=".workspaces.CollectionSummaryExternalizer" />
	<adapter factory=".workspaces.CollectionSummaryExternalizer"
			 name="summary"/>
	<adapter factory=".workspaces.ContainerCollectionDetailExternalizer"
			 name="detail"/>
	<adapter factory=".workspaces.LibraryCollectionDetailExternalizer"
			 name="detail" />
	<adapter factory=".workspaces.LibraryCollectionDetailExternalizer" />
	<adapter factory=".workspaces.ContainerCollectionDetailExternalizer" />
	<adapter factory=".workspaces.CollectionContentTypeAware" />

	<adapter factory="._adapters.EnclosureExternalObject" />
	<adapter factory="._adapters.BrokenExternalObject" />
	<adapter factory=".pyramid_renderers.render_enclosure_factory" />

	<!-- Assessment -->
	<!-- Object transformers -->
	<adapter factory=".dataserver_pyramid_views._question_submission_transformer"
			 for="nti.assessment.interfaces.IQuestionSubmission"
			 provides=".interfaces.INewObjectTransformer" />
	<adapter factory=".dataserver_pyramid_views._question_set_submission_transformer"
			 for="nti.assessment.interfaces.IQuestionSetSubmission"
			 provides=".interfaces.INewObjectTransformer" />

	<!-- Events -->
	<subscriber	handler="._question_map.add_assessment_items_from_new_content" />

	<subscriber handler="._indexmanager_event_listeners.add_filesystem_index" />
	<subscriber handler="._indexmanager_event_listeners.add_s3_index" />

	<!-- Logon -->
	<!-- Local users with passwords get a direct logon link -->
	<subscriber factory=".logon._SimpleExistingUserLinkProvider"
				provides=".interfaces.ILogonLinkProvider"/>
	<!--
		Users we've never seen before do as well. Security through
		obscurity and avoiding leaking information. Also, since
		we are not currently offering any other login types in
		production, this is necessary to make the login page work out.
	-->
	<subscriber factory=".logon._SimpleExistingUserLinkProvider"
				provides=".interfaces.ILogonLinkProvider"
				for=".interfaces.IMissingUser pyramid.interfaces.IRequest" />

	<!-- All the other logon types are disabled in production -->
	<subscriber factory=".logon._SimpleMissingUserFacebookLinkProvider"
				provides=".interfaces.ILogonLinkProvider"
				zcml:condition="have devmode"/>
	<subscriber factory=".logon._SimpleExistingUserFacebookLinkProvider"
				provides=".interfaces.ILogonLinkProvider"
				zcml:condition="have devmode"/>
	<subscriber factory=".logon._WhitelistedDomainGoogleLoginLinkProvider"
				provides=".interfaces.ILogonLinkProvider"
				zcml:condition="have devmode"/>
	<subscriber factory=".logon._ExistingOpenIdUserLoginLinkProvider"
				provides=".interfaces.ILogonLinkProvider"
				zcml:condition="have devmode"/>
	<subscriber factory=".logon._MissingUserWhitelistedDomainGoogleLoginLinkProvider"
				provides=".interfaces.ILogonLinkProvider"
				zcml:condition="have devmode"/>
	<subscriber factory=".logon._OnlineQueryGoogleLoginLinkProvider"
				provides=".interfaces.ILogonLinkProvider"
				zcml:condition="have devmode"/>
	<subscriber factory=".logon._MissingUserAopsLoginLinkProvider"
				provides=".interfaces.ILogonLinkProvider"
				zcml:condition="have devmode"/>

	<!-- Individual field updates -->
	<!-- Normal traversing of the fields namespace, both with and
	without request -->
	<adapter factory="._adapters.SharedWithExternalFieldTraverser"
			 for="nti.dataserver.interfaces.IShareableModeledContent pyramid.interfaces.IRequest"
			 provides="zope.traversing.interfaces.ITraversable"
			 name="fields" />
	<adapter factory="._adapters.UserExternalFieldTraverser"
			 for="nti.dataserver.interfaces.IUser pyramid.interfaces.IRequest"
			 provides="zope.traversing.interfaces.ITraversable"
			 name="fields" />

	<adapter factory="._adapters.SharedWithExternalFieldTraverser"
			 for="nti.dataserver.interfaces.IShareableModeledContent"
			 provides="zope.traversing.interfaces.ITraversable"
			 name="fields" />
	<adapter factory="._adapters.UserExternalFieldTraverser"
			 for="nti.dataserver.interfaces.IUser"
			 provides="zope.traversing.interfaces.ITraversable"
			 name="fields" />

	<!-- Object graph traversal -->

	<!--
	The default traversable is registered by zope.traversing for no
	request and zope's request. Here we register it for our request.
	Note in general that it is necessary to register adapters for both
	no request and with a request.
	-->

	<adapter
		for="* pyramid.interfaces.IRequest"
		factory="zope.traversing.adapters.DefaultTraversable"
		provides="zope.traversing.interfaces.ITraversable" />
	<adapter
		name="adapter"
		for="* pyramid.interfaces.IRequest"
		factory="._dataserver_pyramid_traversal.adapter_request"
		provides="zope.traversing.interfaces.ITraversable" />
	<!-- <adapter -->
	<!-- 	name="adapter" -->
	<!-- 	for=".dataserver_pyramid_views._AbstractObjectResource pyramid.interfaces.IRequest" -->
	<!-- 	factory="._dataserver_pyramid_traversal._resource_adapter_request" -->
	<!-- 	provides="zope.traversing.interfaces.ITraversable" /> -->
<!--
	Note that this object /implements/ ITraversable, but is not
	registered. Because it's more specific than *, it would trump all
	access to the many objects that are ISimpleEnclosureContainer.
	We're not ready for that yet.
	<adapter
		for="nti.dataserver.interfaces.ISimpleEnclosureContainer"
		factory="._adapters.EnclosureTraversable"
		provides="zope.traversing.interfaces.ITraversable" />
-->
	<adapter
		name="enclosures"
		for="nti.dataserver.interfaces.ISimpleEnclosureContainer pyramid.interfaces.IRequest"
		factory="._dataserver_pyramid_traversal.EnclosureTraversable"
		provides="zope.traversing.interfaces.IPathAdapter" />

	<!--
	As we traverse down, if we hit ISites, install them, thus letting
	ZCA registries be as local as needed.
	-->
	<subscriber
		zcml:condition="installed zope.site"
		for="zope.component.interfaces.ISite
			 zope.traversing.interfaces.IBeforeTraverseEvent"
		handler="zope.site.threadSiteSubscriber"
		/>


	<!-- Events -->
	<!-- Stream events -->
	<subscriber handler="._stream_event_listeners.user_change_broadcaster" />
	<subscriber handler="._stream_event_listeners.user_change_new_note_emailer" />

	<subscriber handler="._socket_event_listeners.session_disconnected_broadcaster" />
	<subscriber handler="._socket_event_listeners.session_connected_broadcaster" />

	<subscriber factory="._socket_event_listeners._UserPresenceExternalDecoratorFactory"
				for="nti.dataserver.interfaces.IUser"
				provides="nti.externalization.interfaces.IExternalObjectDecorator" />

	<subscriber handler=".logon._user_did_logon" />

	<subscriber factory=".dataserver_socketio_views._WSWillUpgradeVeto"
				provides="geventwebsocket.interfaces.IWSWillUpgradeVeto"
				for="geventwebsocket.interfaces.IWSWillUpgradeEvent" />

	<!-- Friends Lists are uncachable due to the nested user changing
	presence -->
	<class class="nti.dataserver.users.FriendsList">
		<implements interface=".interfaces.IUncacheableInResponse" />
	</class>

	<include package="nti.contentrange" />
	<include package="nti.contentsearch" />
	<include package="nti.socketio" />
	<include package="nti.assessment" />

	<!-- UI Rendering -->
	<include package="." file="configure_tables.zcml" />

	<!-- Content censoring -->
	<include package="." file="configure_censor.zcml" />

	<!-- Content restrictions -->
	<!--
		Sadly, the include overrides only works at the top-level (?)
		So we cannot do this from the file we ourselves include.
		(We do, but without also doing it here, we get conflict errors)
	-->
	<includeOverrides file="restricted_overrides.zcml" />

	<include package="." file="configure_restricted_contenttypes.zcml" />

	<includeOverrides file="overrides.zcml" />

	<!-- Named site policies -->
	<include package="." file="configure_site_policies.zcml" />
	<!-- User-type policies -->
	<include package="." file="configure_user_policies.zcml" />

	<!-- Hacky temporary stuff -->
	<adapter name="OUAdminFactory"
			 for="*"
			 factory=".pyramid_auth.OUAdminFactory"
			 provides="nti.dataserver.interfaces.IGroupMember"
			 zcml:condition="have devmode" />

</configure>
