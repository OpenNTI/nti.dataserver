<!-- -*- mode: nxml -*- -->
<configure	xmlns="http://namespaces.zope.org/zope"
			xmlns:i18n="http://namespaces.zope.org/i18n"
			xmlns:zcml="http://namespaces.zope.org/zcml">
	
	<include package="zope.component" file="meta.zcml" />
	<include package="zope.component" />
	<include package="zope.security" file="meta.zcml" />
	<include package="zope.security" />
	
	<include package="zope.formlib" />
	<include package="zope.contentprovider" />
	<include package="zope.browserresource" />
	<include package="zope.componentvocabulary" />
	<include package="zope.browserpage" file="meta.zcml" /> <!-- tales:expressiontype -->
	<include package="zope.browserresource" file="meta.zcml" /> <!-- browser:resource[Directory] -->
	
	<include package="nti.dataserver" />

	<include package=".capabilities" />
	
	<!-- I18N -->
	<i18n:registerTranslations directory="locales" />
	
	<!--
		Let requests be used for negotiating locales in the Zope way.
		Needed for tables based on z3c/ZPT, which use the Zope-based request
	-->
	<!-- Languages -->
	<!-- Pyramid requests, via Zope -->
	<adapter factory="._pyramid_zope_integrations.PyramidBrowserPreferredLanguages" />
	
	<!-- Zope Requests. This is also cacheable. -->
	<adapter factory="zope.publisher.browser.ModifiableBrowserLanguages"
			 provides="zope.i18n.interfaces.IModifiableUserPreferredLanguages"/>
			 
	<!-- Requests themselves -->
	<adapter factory="._pyramid_zope_integrations.PyramidZopeRequestProxy" />

	<!-- Entities -->
	<adapter factory="._adapters.UserPreferredLanguages" />

	<!-- Charsets -->
	<adapter factory="._pyramid_zope_integrations.PyramidBrowserPreferredCharsets" />
	
	<adapter factory="zope.publisher.http.HTTPCharsets"
			 provides="zope.i18n.interfaces.IUserPreferredCharsets" />

	<!-- Country names, language names, flag resources -->
	<include package="plone.i18n" />

	<!-- __________________ -->

	<!-- Resource traversal -->
	<adapter factory="._dataserver_pyramid_traversal.Dataserver2RootTraversable"
			 provides="zope.traversing.interfaces.ITraversable" />
			 
	<adapter factory="._dataserver_pyramid_traversal.UserTraversable"
			 provides="zope.traversing.interfaces.ITraversable" />
			 
	<adapter factory="._dataserver_pyramid_traversal.CommunityTraversable"
			 provides="zope.traversing.interfaces.ITraversable" />
			 
	<adapter factory="._dataserver_pyramid_traversal.ProviderTraversable"
			 provides="zope.traversing.interfaces.ITraversable" />

	<include package="." file="configure_workspaces.zcml" />

	<adapter factory=".pyramid_renderers.uncacheable_factory" />
	<adapter factory=".pyramid_renderers.unmodified_factory" />
	<adapter factory=".pyramid_renderers._EntityCacheController" />
	<adapter factory=".pyramid_renderers._UserCacheController" />
	<adapter factory=".pyramid_renderers._ModeledContentCacheController" />
	<adapter factory=".pyramid_renderers._UGDExternalCollectionCacheController" />
	<adapter factory=".pyramid_renderers._LongerCachedUGDExternalCollectionCacheController" />
	<adapter factory=".pyramid_renderers._UserActivityViewCacheController" />
	<adapter factory=".pyramid_renderers._ZopeFileCacheController" />
	<adapter factory=".pyramid_renderers._ContentPackageLibraryCacheController" />
	<adapter factory=".pyramid_renderers._ContentUnitInfoCacheController" />
	<adapter factory=".pyramid_renderers._ETagCachedUGDExternalCollectionCacheController" />
	<adapter factory=".pyramid_renderers._TranscriptCacheController" />

	<adapter factory=".pyramid_renderers.UseTheRequestContextCacheController"
			 for=".interfaces.IUseTheRequestContextUGDExternalCollection" />
			 
	<adapter factory=".pyramid_renderers.UseTheRequestContextCacheController"
			 for=".interfaces.ILibraryCollection" />

	<subscriber factory="._adapters._SectionInfoUserLikeDecorator"
				provides="nti.externalization.interfaces.IExternalObjectDecorator" />
				
	<subscriber factory="._adapters._DFLUserLikeDecorator"
				provides="nti.externalization.interfaces.IExternalObjectDecorator" />
				
	<subscriber factory=".dfl_views.DFLGetMembershipLinkProvider"
				provides="nti.externalization.interfaces.IExternalMappingDecorator" />
				
	<subscriber factory="._adapters._EnglishFirstAndLastNameDecorator"
				provides="nti.externalization.interfaces.IExternalMappingDecorator" />

	<!--
		 ********
		 Flagging
		 ********
	-->
	<subscriber factory=".flagging_views.FlagLinkDecorator"
				provides="nti.externalization.interfaces.IExternalMappingDecorator" />

	<!-- Chat -->
	<!-- Make messages appear as flaggable -->
	<class class="nti.chatserver.messageinfo.MessageInfo">
		<!-- Making it flaggable... -->
		<implements interface="nti.dataserver.interfaces.IFlaggable" />
		<!-- ...promises that it can be annotatable -->
		<implements interface="zope.annotation.interfaces.IAttributeAnnotatable" />
		<!-- NOTE: That gets zope.dublincore involved in updating modification times -->
	</class>

	<!-- ******** -->

	<!-- Favorites/liking -->
	<subscriber factory=".liking_views.FavoriteLinkDecorator"
				provides="nti.externalization.interfaces.IExternalMappingDecorator" />
				
	<subscriber factory=".liking_views.LikeLinkDecorator"
				provides="nti.externalization.interfaces.IExternalMappingDecorator" />

	<!-- Other decorators -->
	<subscriber factory=".ugd_query_views.RepliesLinkDecorator"
				provides="nti.externalization.interfaces.IExternalMappingDecorator" />

	<subscriber factory=".pyramid_renderers_edit_link_decorator.EditLinkDecorator"
				provides="nti.externalization.interfaces.IExternalMappingDecorator"
				for="nti.dataserver.interfaces.IModeledContent" />

	<!-- Decorating the user -->
	<subscriber factory=".pyramid_renderers_edit_link_decorator.EditLinkDecorator"
				provides="nti.externalization.interfaces.IExternalMappingDecorator"
				for="nti.dataserver.interfaces.IUser" />

	<subscriber factory=".pyramid_renderers_profile_link_decorator.ProfileLinkDecorator"
				provides="nti.externalization.interfaces.IExternalMappingDecorator" />
				
	<subscriber factory="._adapters._AuthenticatedUserLinkAdder"
				provides="nti.externalization.interfaces.IExternalMappingDecorator" />

	<subscriber factory=".usersearch_views._SharedDynamicMembershipProviderDecorator"
				provides="nti.externalization.interfaces.IExternalMappingDecorator" />

	<adapter factory="._adapters.EnclosureExternalObject" />
	<adapter factory="._adapters.BrokenExternalObject" />
	
	<subscriber factory="._adapters._DeletedObjectPlaceholderDecorator"
				provides="nti.externalization.interfaces.IExternalObjectDecorator" />
				
	<adapter factory=".pyramid_renderers.render_enclosure_factory" />

	<!-- Assessment -->
	<!-- Object transformers -->
	<adapter factory=".ugd_edit_views._question_submission_transformer"
			 for="nti.assessment.interfaces.IQuestionSubmission"
			 provides=".interfaces.INewObjectTransformer" />
			 
	<adapter factory=".ugd_edit_views._question_set_submission_transformer"
			 for="nti.assessment.interfaces.IQuestionSetSubmission"
			 provides=".interfaces.INewObjectTransformer" />

	<!-- Events -->

	<subscriber handler="._indexmanager_event_listeners.add_filesystem_index" />
	<subscriber handler="._indexmanager_event_listeners.add_s3_index" />
	<subscriber handler=".glossary_views.add_main_glossary_from_new_content" />

	<subscriber handler=".account_creation_views.request_profile_update_on_user_upgrade" />
	<subscriber handler=".account_creation_views.accept_invitations_on_user_creation" />
	<subscriber handler=".account_creation_views.link_removed_on_user" />

	<!-- Logon -->
	<include package="." file="configure_logon.zcml" />

	<!-- Individual field updates -->
	<!-- Normal traversing of the fields namespace, both with and without request -->
	<adapter factory="._adapters.GenericModeledContentExternalFieldTraverser"
			 for="nti.dataserver.interfaces.IModeledContent pyramid.interfaces.IRequest"
			 provides="zope.traversing.interfaces.ITraversable"
			 name="fields" />
			 
	<adapter factory="._adapters.UserExternalFieldTraverser"
			 for="nti.dataserver.interfaces.IUser pyramid.interfaces.IRequest"
			 provides="zope.traversing.interfaces.ITraversable"
			 name="fields" />

	<adapter factory="._adapters.GenericModeledContentExternalFieldTraverser"
			 for="nti.dataserver.interfaces.IModeledContent"
			 provides="zope.traversing.interfaces.ITraversable"
			 name="fields" />
			 
	<adapter factory="._adapters.UserExternalFieldTraverser"
			 for="nti.dataserver.interfaces.IUser"
			 provides="zope.traversing.interfaces.ITraversable"
			 name="fields" />

	<!-- Object graph traversal -->

	<!--
	The default traversable is registered by zope.traversing for no
	request and zope's request. Here we register it for our request;
	we do the same with some other things that zope.traversing provides.
	Note in general that it is necessary to register adapters for both
	no request and with a request.
	-->

	<adapter for="* pyramid.interfaces.IRequest"
			 factory="zope.traversing.adapters.DefaultTraversable"
			 provides="zope.traversing.interfaces.ITraversable" />
			 
	<adapter name="adapter"
			 for="* pyramid.interfaces.IRequest"
			 factory="._dataserver_pyramid_traversal.adapter_request"
			 provides="zope.traversing.interfaces.ITraversable" />
			 
	<!-- Resources -->
	<adapter name="resource"
			 for="* pyramid.interfaces.IRequest"
			 provides="zope.traversing.interfaces.ITraversable"
			 factory="._dataserver_pyramid_traversal.resource" />

	<!-- <adapter -->
	<!--	name="adapter" -->
	<!--	for=".dataserver_pyramid_views._AbstractObjectResource pyramid.interfaces.IRequest" -->
	<!--	factory="._dataserver_pyramid_traversal._resource_adapter_request" -->
	<!--	provides="zope.traversing.interfaces.ITraversable" /> -->
	<!--
	Note that this object /implements/ ITraversable, but is not
	registered. Because it's more specific than *, it would trump all
	access to the many objects that are ISimpleEnclosureContainer.
	We're not ready for that yet.
	<adapter
		for="nti.dataserver.interfaces.ISimpleEnclosureContainer"
		factory="._adapters.EnclosureTraversable"
		provides="zope.traversing.interfaces.ITraversable" />
	-->
	<adapter name="enclosures"
			 for="nti.dataserver.interfaces.ISimpleEnclosureContainer pyramid.interfaces.IRequest"
			 factory="._dataserver_pyramid_traversal.EnclosureTraversable"
			 provides="zope.traversing.interfaces.IPathAdapter" />

	<!--
	As we traverse down, if we hit ISites, install them, thus letting
	ZCA registries be as local as needed.
	NOTE: This is disabled. See zope_site_tween for details. Turning
	it on loses configuration.
	<subscriber
		zcml:condition="installed zope.site"
		for="zope.component.interfaces.ISite zope.traversing.interfaces.IBeforeTraverseEvent"
		handler="zope.site.threadSiteSubscriber" />
	-->

	<!-- Events -->
	<!-- Stream events -->
	<subscriber handler="._stream_event_listeners.user_change_broadcaster" />
	<subscriber handler="._stream_event_listeners.user_change_new_note_emailer" />

	<subscriber handler="._socket_event_listeners.session_disconnected_broadcaster" />
	<subscriber handler="._socket_event_listeners.send_presence_when_contact_added" />

	<subscriber factory=".dataserver_socketio_views._WSWillUpgradeVeto"
				provides="geventwebsocket.interfaces.IWSWillUpgradeVeto"
				for="geventwebsocket.interfaces.IWSWillUpgradeEvent" />

	<!--
		 FriendsLists have no modification date due to the nested user changing
		 presence, both individually and as a group.
	-->
	<class class="nti.dataserver.users.FriendsList">
		<implements interface=".interfaces.IUnModifiedInResponse" />
	</class>
	
	<class class=".workspaces.FriendsListContainerCollection">
		<implements interface=".interfaces.IUnModifiedInResponse" />
	</class>


	<!-- Forking events -->
	<!--
	 Note that if we are not preloading the app, then this doesn't
	 get registered in the master process and so never gets hit.
	-->
	<configure zcml:condition="installed gevent">
		<subscriber handler=".gunicorn._process_will_fork_listener" />
		<subscriber handler=".gunicorn._process_did_fork_will_exec" />
	</configure>
	<subscriber handler=".application._configure_pyramid_zodbconn" />
	<subscriber handler=".application._content_package_library_registered" />
	<adapter factory=".application._FilesystemStaticFileConfigurator" />

	<include package="nti.contentrange" />
	<include package="nti.contentsearch" />
	<include package="nti.socketio" />
	<include package="nti.assessment" />
	<include package="nti.contentfragments" />
	<include package="nti.contentprocessing" />

	<!-- UI Rendering -->
	<include package="." file="configure_tables.zcml" />
	<include package="." file="configure_feeds.zcml" />
	<include package="z3c.ptcompat" /> <!-- regular pagetemplate usage uses chamelean engine -->
	
	<!-- Content restrictions -->
	<!--
	Sadly, the include overrides only works at the top-level (?)
	So we cannot do this from the file we ourselves include.
	(We do, but without also doing it here, we get conflict errors)
	-->
	<includeOverrides file="restricted_overrides.zcml" />

	<include package="." file="configure_restricted_contenttypes.zcml" />

	<includeOverrides file="overrides.zcml" />
	<include package=".policies" file="configure.zcml" />
	<include package="." file="configure_invitations.zcml" />
	
	<include package=".store" />
	<include package=".forums" />
	<include package=".dashboard" />
	<include package=".contentlibrary" />
		
	<!-- Hacky temporary stuff -->
	<adapter name="OUAdminFactory"
			 for="*"
			 factory=".pyramid_auth.OUAdminFactory"
			 provides="nti.dataserver.interfaces.IGroupMember"
			 zcml:condition="have devmode" />

	<adapter name="NextthoughtDotComAdmin"
			 for="nti.dataserver.interfaces.IUser"
			 factory=".pyramid_auth.NextthoughtDotComAdmin"
			 provides="nti.dataserver.interfaces.IGroupMember" />

	<!-- Resolving metadata, used in the implementation of links -->
	<adapter factory=".metadata_resolvers.ContentMetadataFromContentUnit" />
	
	<utility name="tag"
			 factory=".metadata_resolvers.TagURLHandler" />


	<utility zcml:condition="have testmode"
			 component=".pyramid_renderers._throw_action"
			 provides=".pyramid_renderers.ICatchComponentAction" />

</configure>
