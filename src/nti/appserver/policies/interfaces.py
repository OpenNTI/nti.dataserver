# -*- coding: utf-8 -*-
"""
Site policies interfaces

$Id: interfaces.py 19763 2013-05-31 22:02:07Z carlos.sanchez $
"""
from __future__ import print_function, unicode_literals, absolute_import
__docformat__ = "restructuredtext en"

from nti.appserver import MessageFactory as _

from zope import schema
from zope import interface

from nti.contentfragments.schema import PlainText

from nti.dataserver import interfaces as nti_interfaces
from nti.dataserver.users import interfaces as user_interfaces

from nti.utils.schema import ValidTextLine
from nti.utils.schema import ValidChoice as Choice

class ISitePolicyUserEventListener(interface.Interface):
    """
    Register instances of these as utilities by the name of the site
    they should apply to.
    """

    def map_validation_exception(incoming_data, exception):
        """
        Gives a site policy a chance to change an exception being returned
        during validation.
        """

    def user_will_update_new(user, event):
        """
        Handler for the IWillUpdateNewEntityEvent, called
        before creation is complete or the user is updated.
        """

    def user_created(user, event):
        """
        Called when a user is created.
        """

    def user_created_with_request(user, event):
        """
        Called when a user is created in the scope of an interactive
        request (after user_created).
        """

    def user_will_create(user, event):
        """
        Called just before a user is created. Do most validation here.
        """

    # TODO : I'm not entirely sure this belongs here. Might want to rethink this a lot
    def upgrade_user(user):
        """
        Transition a user from a limited form to the next lest limited forrm.
        Specifically intended to deal with providing coppa consent.
        """

class IMathcountsUser(nti_interfaces.ICoppaUser):
    pass

class IMathcountsCoppaUserWithoutAgreement(IMathcountsUser, nti_interfaces.ICoppaUserWithoutAgreement):
    pass

class IMathcountsCoppaUserWithAgreement(IMathcountsUser, nti_interfaces.ICoppaUserWithAgreement):
    pass

class IMathcountsCoppaUserWithAgreementUpgraded(IMathcountsCoppaUserWithAgreement, nti_interfaces.ICoppaUserWithAgreementUpgraded):
    pass

class IMathcountsCoppaUserWithoutAgreementUserProfile(user_interfaces.IRestrictedUserProfileWithContactEmail):

    participates_in_mathcounts = schema.Bool(
        title="Do you currently participate in MATHCOUNTS?",
        required=False,
        default=False)

    password_recovery_email_hash = ValidTextLine(
        title="A secure hash of an email address used during password recovery",
        description="Typically auto-generated by setting the `email` field.",
        required=True)

    password_recovery_email_hash.setTaggedValue(user_interfaces.TAG_HIDDEN_IN_UI, True)
    password_recovery_email_hash.setTaggedValue(user_interfaces.TAG_UI_TYPE, user_interfaces.UI_TYPE_HASHED_EMAIL)

    email = ValidTextLine(
        title='Email',
        description=u'Email is not stored at this level, but the field is specified here as a convenient way'
            ' to be able to set the password_recovery_email_hash',
        required=False,  # But we require it in the UI to get the recovery
        constraint=user_interfaces.checkEmailAddress)

    email.setTaggedValue(user_interfaces.TAG_UI_TYPE, user_interfaces.UI_TYPE_HASHED_EMAIL)
    email.setTaggedValue(user_interfaces.TAG_REQUIRED_IN_UI, True)

class IMathcountsCoppaUserWithAgreementUserProfile(user_interfaces.IEmailRequiredUserProfile):

    participates_in_mathcounts = schema.Bool(
        title="Do you currently participate in MATHCOUNTS?",
        required=False,
        default=False)

    affiliation = ValidTextLine(
        title='Affiliation',
        description="Your affiliation, such as school name",
        required=False)  # redefined because we tag it
    affiliation.setTaggedValue(user_interfaces.TAG_UI_TYPE, 'nti.appserver.site_policies.school')
    affiliation.setTaggedValue(user_interfaces.TAG_READONLY_IN_UI, True)  # post-creation

    role = schema.Choice(title="Your role in the organization",
                          values=("Student", "Teacher", "Coach", "Parent", "Volunteer", "Other"),
                          default="Other",
                          required=False)  # redefined because we tag it
    role.setTaggedValue(user_interfaces.TAG_READONLY_IN_UI, True)  # post-creation

    # When we upgrade accounts, we need to keep the contact email
    contact_email = ValidTextLine(
        title='Contact email',
        description=u"An email address to use to contact someone responsible for this accounts' user",
        required=False,
        constraint=user_interfaces.checkEmailAddress)
    contact_email.setTaggedValue(user_interfaces.TAG_HIDDEN_IN_UI, True)
    contact_email.setTaggedValue(user_interfaces.TAG_UI_TYPE, user_interfaces.UI_TYPE_EMAIL)

class IColumbiaBusinessUserProfile(user_interfaces.IEmailRequiredUserProfile):
    """
    The definition of a complete profile for a columbia business school
    user. This includes the standard fields, plus some random information
    about a company the user might be associated with, as well as expanded
    personal information.
    """

    company = ValidTextLine(
        title=_('Company Name'),
        description=_("The name of the company you are affiliated with."),
        required=False)

    companyCountry = Choice(
        title=_("Company Country"),
        description=_("The country the company you are affiliated with is located in."),
        vocabulary="Countries",
        required=False)

    companyDescription = PlainText(
        title=_("Company Description"),
        description=_("One to three paragraph description of your company."),
        required=False,
        min_length=1,
        max_length=2000)  # Somewhat arbitrary estimate of three paragraphs

    companyRole = PlainText(
        title=_("Company Role and Responsibilities"),
        description=_("One to three paragraph description of your role and responsibilities in the company."),
        required=False,
        min_length=1,
        max_length=2000)  # Somewhat arbitrary estimate of three paragraphs

    birthCountry = Choice(
        title=_("Birth Country"),
        description=_("The country you were born in."),
        vocabulary="Countries",
        required=False)
